# Declaring the user list
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: basic-auth
  namespace: kube-system
spec:
  basicAuth:
    secret: user-auth-secret

---

apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: traefik-dashboard-append
  namespace: kube-system
spec:
  addPrefix:
    prefix: '/dashboard'

---

# Note: in a kubernetes secret the string (e.g. generated by htpasswd) must be base64-encoded first.
# To create an encoded user:password pair, the following command can be used:
# htpasswd -nb user password | openssl base64

apiVersion: v1
kind: Secret
metadata:
  name: user-auth-secret
  namespace: kube-system
type: kubernetes.io/basic-auth
stringData:
  username: barak@barakimam.me     # required field for kubernetes.io/basic-auth
  password: P@ssw0rd!

---
# metric.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-metric
  namespace: kube-system
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`traefik.dev.localhost`) && PathPrefix(`/metrics`)
      kind: Rule
      services:
        - name: prometheus@internal
          kind: TraefikService
  tls:
    secretName: dev-localhost-tls

---
# dashboard.yaml

apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard-external
  namespace: kube-system
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`traefik.labs.barakimam.me`) && PathPrefix(`/api`)
      kind: Rule
      middlewares:
        - name: basic-auth
      services:
        - name: api@internal
          kind: TraefikService

    - match: Host(`traefik.labs.barakimam.me`)
      kind: Rule
      middlewares:
        - name: basic-auth
        - name: traefik-dashboard-append
      services:
        - name: api@internal
          kind: TraefikService

  tls:
    secretName: le-labs-barakimam

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: kube-system
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`traefik.dev.localhost`) && PathPrefix(`/api`)
      kind: Rule
      middlewares:
        - name: basic-auth
      services:
        - name: api@internal
          kind: TraefikService

    - match: Host(`traefik.dev.localhost`)
      kind: Rule
      middlewares:
        - name: basic-auth
        - name: traefik-dashboard-append
      services:
        - name: api@internal
          kind: TraefikService
  tls:
    secretName: dev-localhost-tls

---

# apiVersion: cert-manager.io/v1
# kind: Certificate
# metadata:
#   name: traefik-homelab-tls
# spec:
#   secretName: traefik-homelab-tls
#   commonName: "traefik.home.labs"
#   issuerRef:
#     name: imamlabs-step-issuer
#     kind: StepIssuer
#     group: certmanager.step.sm
#   dnsNames:
#   - "traefik.home.labs"

# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: traefik-dashboard-homelab
#   namespace: kube-system
# spec:
#   entryPoints:
#     - websecure
#   routes:
#     - match: Host(`traefik.home.labs`) && PathPrefix(`/api`)
#       kind: Rule
#       middlewares:
#         - name: basic-auth
#       services:
#         - name: api@internal
#           kind: TraefikService

#     - match: Host(`traefik.home.labs`)
#       kind: Rule
#       middlewares:
#         - name: basic-auth
#         - name: traefik-dashboard-append
#       services:
#         - name: api@internal
#           kind: TraefikService
#   tls:
#     secretName: traefik-homelab-tls

# ---

# apiVersion: v1
# kind: Service
# metadata:
#   name: mysql
#   namespace: kube-system
# spec:
#   externalName: '172.17.0.1'
#   type: ExternalName

# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRouteTCP
# metadata:
#   name: mysql
#   namespace: kube-system
# spec:
#   entryPoints:
#     - mysql
#   routes:
#   - match: HostSNI(`mysql.dev.localhost`)
#     services:
#       - name: mysql
#         port: 3306
